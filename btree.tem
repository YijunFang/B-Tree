
template<typename T>
btree<T>::btree(size_t maxNodeElems) :
        _root(nullptr), _head(nullptr), _tail(nullptr), _maxElemt(maxNodeElems),
            _treeSize(0) {}

template<typename T>
btree<T>::~btree() {delete _root; }

//copy constructor
template<typename T>
btree<T>::btree(const btree<T>& original) :
        _root(nullptr), _head(nullptr), _tail(nullptr), 
        _maxElemt(original._maxElemt), _treeSize(0) {

    queue<typename btree<T>::Node*> queueNode;
    queueNode.push(original._root);

    while (queueNode.size() != 0) {
        auto currNode = queueNode.front();
        queueNode.pop();

        for (size_t i = 0; i < currNode->usedSpace_; ++i) {
            insert(currNode->elem_[i]);
        }
        for (size_t i = 0; i <= currNode->usedSpace_; ++i) {
            if (currNode->children_[i] != nullptr)
                queueNode.push(currNode->children_[i]);
        }
    }
}

//move constructor
template<typename T>
btree<T>::btree(btree<T> && original) :
        _root(original._root), _head(original._head), _tail(original._tail),
         _maxElemt(original._maxElemt), _treeSize(original._treeSize) {
            original._root = nullptr;
            original._head = nullptr;
            original._tail = nullptr;
            original._treeSize = 0;
}

//copy assignment
template<typename T> btree<T>&
btree<T>::operator=(const btree<T>& rhs) {
    if (this != &rhs) {
        delete _root;
        _root = nullptr;
        _head = nullptr;
        _tail = nullptr;
        _maxElemt = rhs._maxElemt;

        queue<typename btree<T>::Node*> queueNode;
        queueNode.push(rhs._root);

        while (queueNode.size() != 0) {
            auto currNode = queueNode.front();
            queueNode.pop();

            for (size_t i = 0; i < currNode->usedSpace_; ++i) {
                insert(currNode->elem_[i]);
            }
            for (size_t i = 0; i <= currNode->usedSpace_; ++i) {
                if (currNode->children_[i] != nullptr){
                    queueNode.push(currNode->children_[i]);
                }
            }
        }
    } 
    return *this;
}

//move assignment
template<typename T> btree<T>&
btree<T>::operator=(btree<T> && rhs) {
	if(this != &rhs){
		delete _root;
		_root = rhs._root;
		_treeSize = rhs._treeSize;
		_maxElemt = rhs._maxElemt;
		_head = nullptr;
        _tail = nullptr;
        
        update_HeadTail();

        rhs._root = nullptr;
        rhs._head = nullptr;
        rhs._tail = nullptr;
        rhs._treeSize = 0;
	}
	return *this;

}

template<typename T> typename btree<T>::iterator
btree<T>::find(const T& elem){
    if (_root == nullptr) return end();
    Node *tmp_ = _root;

     while(true) {
		size_t i;
		for (i = 0; i < tmp_->usedSpace_; ++i) {

			if (tmp_->elem_[i] == elem) {
				return iterator(tmp_, i, this);

			} else if (tmp_->elem_[i] > elem) {//check children
				if (tmp_->children_[i] == nullptr) {
					return end();
				} else {
					tmp_ = tmp_->children_[i];
					i = 0;
					break;
				}
			}
		}
		// go to the last children
		if (i == tmp_->usedSpace_) {
			if (tmp_->children_[i] == nullptr) {
				return end();
			} else {
				tmp_ = tmp_->children_[i];
			}
		}
	}
    return end();
}

template<typename T> typename btree<T>::const_iterator
btree<T>::find(const T& elem) const{

    if (_root == nullptr) return end();
    Node *tmp_ = _root;

    while(true) {
		size_t i;
		for (i = 0; i < tmp_->usedSpace_; ++i) {
			if (tmp_->elem_[i] == elem) {
				return iterator(tmp_, i, this);

			} else if (tmp_->elem_[i] > elem) {//check children
				if (tmp_->children_[i] == nullptr) {
					return end();
				} else {
					tmp_ = tmp_->children_[i];
					i = 0;
					break;
				}
			}
		}
		// go to the last children
		if (i == tmp_->usedSpace_ && tmp_->elem_[i] < elem) {
			if (tmp_->children_[i] == nullptr) {
				return end();
			} else {
				tmp_ = tmp_->children_[i];
			}
		}
	}
    return end();
}

template<typename T>
void btree<T>::update_HeadTail(){
    
    Node *parent = _root;
    _head = _root;
    _tail = _root;

    while(parent->children_[0] != nullptr){
        parent = parent->children_[0];
    }
    _head = parent;    
    parent = _root;
    while (parent->usedSpace_!= 0){
        if(parent->children_[parent->usedSpace_]!=nullptr){
            parent = parent->children_[parent->usedSpace_];
        }else{
            break;
        }
    }
    _tail = parent;

}


template<typename T> std::pair<typename btree<T>::iterator, bool>
btree<T>::insert(const T& elem) {
    Node *parent = _root;
    Node *currNode = parent;
    size_t i = 0;

    while (true) {

        if (_root == nullptr) {
            _root= new Node(elem, _maxElemt, nullptr);
            ++_treeSize;
            update_HeadTail();
            return make_pair(iterator(_root, 0, this), true);

        }else if(currNode == nullptr){
            parent ->children_[i] = new Node(elem, _maxElemt, parent);
            ++_treeSize;
            update_HeadTail();
            return make_pair(iterator(parent ->children_[i] , 0, this), true);
    
        }else if(currNode != nullptr){// if tree not empty
            //at this level loop throught element
            for(i = 0 ; i <  _maxElemt; ++i){ 
               
                if(currNode->elem_ [i] == elem && i< currNode->usedSpace_){
                    update_HeadTail();
                    return make_pair(iterator(currNode, i, this), false);

                //all smaller than element and have space at this level
                }else if (currNode->elem_[i] < elem && (i == currNode->usedSpace_-1)&& !(currNode->is_full()) ){
                    
                        currNode->elem_[currNode->usedSpace_] = elem;
                        currNode->usedSpace_++;
                        update_HeadTail();
                        return make_pair(iterator(currNode, currNode->usedSpace_-1, this), true);

                //all smaller than element and have no space
                }else if (currNode->elem_[i] < elem && (i == _maxElemt-1) && currNode->is_full() ){
                    parent = currNode;
                    currNode = currNode->children_[_maxElemt];
                    i = _maxElemt;
                    break;
                    
                }//value greater than element, insert at children
                else if (currNode->elem_[i] > elem  && i< currNode->usedSpace_){
                    parent = currNode;
                    currNode = currNode->children_[i];
                    break;
                }
            }
        }
    }

}


template<typename T> std::ostream&
operator<<(std::ostream& os, const btree<T>& tree) {
	if (tree._root == nullptr) return os;

    queue<typename btree<T>::Node*> queueNode;
    queueNode.push(tree._root);

    while (queueNode.size() != 0) {
        auto currNode = queueNode.front();
        queueNode.pop();

        for (size_t i = 0; i < currNode->usedSpace_; ++i) {
            os << currNode->elem_[i] << " ";
        }
        for (size_t i = 0; i <= currNode->usedSpace_; ++i) {
            if (currNode->children_[i] != nullptr)
                queueNode.push(currNode->children_[i]);
        }
    }
    return os;
}

template<typename T> typename btree<T>::iterator
btree<T>::begin() const {return iterator(_head, 0, this); }

template<typename T> typename btree<T>::iterator
btree<T>::end() const {return iterator(NULL, 0, this); }


template<typename T>typename btree<T>::const_iterator
btree<T>::cend() const {return const_iterator(end()); }

template<typename T>typename btree<T>::const_iterator
btree<T>::cbegin() const {return const_iterator(begin()); }

template<typename T>typename btree<T>::reverse_iterator
btree<T>::rend() const {return reverse_iterator(begin()); }

template<typename T>typename btree<T>::reverse_iterator
btree<T>::rbegin() const {return reverse_iterator(end()); }

template<typename T>typename btree<T>::const_reverse_iterator
btree<T>::crbegin() const {return const_reverse_iterator(end());}

template<typename T>typename btree<T>::const_reverse_iterator
btree<T>::crend() const {return const_reverse_iterator(begin());}

